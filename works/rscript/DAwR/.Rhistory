} else {
grade <- '불합격'
}
print(x = grade)
score <-  seq(from = 40, to = 100, by = 10)
print(score)
score >= 70
ifelse(test = score >= 70, yes = '합격', no = '불합격')
df <- data.frame(score)
str(object = df)
df$grade <- ifelse(test = d$score >= 70, yes = '합격', no = '불합격')
df$grade <- ifelse(test = df$score >= 70, yes = '합격', no = '불합격')
print(x = df)
menu <- c('짜장면', '탕수육', '깐풍기', '짬뽕', '전가복', '샥스핀')
print(x = item)
for (item in menu) {
print(x = item)
}
item
for (item in menu) {
item
}
item
item
# [1] "짜장면"
# [1] "탕수육"
# [1] "깐풍기"
# [1] "짬뽕"
# [1] "전가복"
# [1] "샥스핀"
for (item in menu) {
item
}
item
item
item
print(item, '시킬까요?\n')
cat(객체명, 문자열, ... , sep = " ")
for (item in menu) {
cat(item, '시킬까요?\n')
}
for (item in menu) {
text <- paste(item, '시킬까요?\n')
print(x = text)
}
i <- 5
while (i > 0) {
print(x = i)
i <- i - 1
}
for (item in menu) {
if (item %in% c('짜장면', '짬뽕')) {
cat(item, '요리부터 주문합시다!\n', sep = '? ')
} else {
cat(item, '다음 메뉴는 뭔가요?\n', sep = '? ')
}
}
for (item in menu) {
if(item %in% c('짜장면', '짬뽕')) {
next
cat(item, '요리부터 주문합시다!\n', sep = '? ')
} else {
cat(item, '다음 메뉴는 뭔가요?\n', sep = '? ')
}
}
# === while문에서 break ===
i <- 0
while (TRUE) {
print(x = i)
i <- i + 1
if(i > 5) {
break
}
}
for (i in 0:9) {
print(x = i)
if(i > 5) {
break
}
}
i <- 0
repeat {
print(x = i)
i <- i + 1
if (i > 5) {
break
}
}
Pythagoras <- function (a, b) {
c <- sprt (x = a^2 + b^2)
return(c)
}
Pythagoras(a = 3, b = 4)
Pythagoras <- function (a, b) {
c <- sprt(x = a^2 + b^2)
return(c)
}
Pythagoras(a = 3, b = 4)
Pythagoras <- function (a, b) {
c <- sprt (x = a^2 + b^2)
return(c)
}
Pythagoras(a = 3, b = 4)
install.packages('kknn')
library(kknn)
Pythagoras <- function (a, b) {
c <- sprt (x = a^2 + b^2)
return(c)
}
Pythagoras(a = 3, b = 4)
install.packages("kknn")
library(kknn)
Pythagoras <- function (a, b) {
c <- sprt (x = a^2 + b^2)
return(c)
}
Pythagoras(a = 3, b = 4)
library(kknn)
Pythagoras <- function (a, b) {
c <- sprt (x = a^2 + b^2)
return(c)
}
Pythagoras(a = 3, b = 4)
Pythagoras <- function (a, b) {
c <- utils::sprt (x = a^2 + b^2)
return(c)
}
Pythagoras(a = 3, b = 4)
install.packages("kknn")
install.packages("kknn")
library(kknn)
Pythagoras <- function (a, b) {
c <- sprt (x = a^2 + b^2)
return(c)
}
Pythagoras(a = 3, b = 4)
c <- sqrt (x = a^2 + b^2)
Pythagoras <- function (a, b) {
c <- sqrt (x = a^2 + b^2)
return(c)
}
Pythagoras(a = 3, b = 4)
score <- 100
if (score >= 90) {
grade <- 'A'
} else if (score >= 80) {
grade <- 'B'
} else if (score >= 70) {
grade <- 'C'
} else if (score >= 60) {
grade <- 'D'
} else {
grade <- 'F'
}
print(x = grade)
getGrade <- function (score) {
if (score >= 90) {
grade <- 'A'
} else if (score >= 80) {
grade <- 'B'
} else if (score >= 70) {
grade <- 'C'
} else if (score >= 60) {
grade <- 'D'
} else {
grade <- 'F'
}
return(grade)
}
getGrade(score = 100)
rm(getGrade)
source(file = 'myFuns.R', encoding = 'UTF-8')
getGrade(score = 100)
guessHeight <- function(name = '홍길동', height = 173) {
answer <- paste(name, '님의 키는', height, 'cm입니다.')
return(answer)
}
guessHeight()
guessHeight(name = '정우성', height = 186)
## 작업 경로 확인 및 변경
getwd()
list.files()
list.files()
setwd(dir = 'C:/Users/DA/GitHub/R/works/rscript/DAwR/data')
install.packages('httr')
library(httr)
setwd(dir = 'C:/Users/DA/GitHub/R/works/rscript/DAwR/data')
URL <- 'http://openapi/molit.go.kr:8--1/OpenAPI_ToolInstallPackage/service/rest/RTMSOBJSvc/getRTMDataSvcAptTrade'
areaCD <- '11110'
ymonth <- '201512'
apiKey <- '0QpsBacnY161CkT22m2WPZOjE4Ij80hQiXdq79044Aup3Oek+5oh7FauomqPINqmM3a1dJOPQQ3IMfOXYXSnZQ=='
res <- GET(url = URL,
query = list(LAWD_CD = areaCD,
DEAL_YMD = ymonth,
serviceKey = apiKey))
print(res)
res <- GET(url = URL,
query = list(LAWD_CD = areaCD,
DEAL_YMD = ymonth,
serviceKey = apiKey))
URL <- 'http://openapi/molit.go.kr:8081/OpenAPI_ToolInstallPackage/service/rest/RTMSOBJSvc/getRTMSDataSvcAptTrade'
areaCD <- '11110'
ymonth <- '201512'
apiKey <- '0QpsBacnY161CkT22m2WPZOjE4Ij80hQiXdq79044Aup3Oek+5oh7FauomqPINqmM3a1dJOPQQ3IMfOXYXSnZQ=='
res <- GET(url = URL,
query = list(LAWD_CD = areaCD,
DEAL_YMD = ymonth,
serviceKey = apiKey))
print(res)
print(res)
res <- GET(url = URL,
query = list(LAWD_CD = areaCD,
DEAL_YMD = ymonth,
serviceKey = apiKey))
library(httr)
URL <- 'http://openapi/molit.go.kr:8081/OpenAPI_ToolInstallPackage/service/rest/RTMSOBJSvc/getRTMSDataSvcAptTrade'
areaCD <- '11110'
ymonth <- '201512'
apiKey <- '0QpsBacnY161CkT22m2WPZOjE4Ij80hQiXdq79044Aup3Oek+5oh7FauomqPINqmM3a1dJOPQQ3IMfOXYXSnZQ=='
res <- GET(url = URL,
query = list(LAWD_CD = areaCD,
DEAL_YMD = ymonth,
serviceKey = apiKey))
URL <- 'http://openapi.molit.go.kr:8081/OpenAPI_ToolInstallPackage/service/rest/RTMSOBJSvc/getRTMSDataSvcAptTrade'
areaCD <- '11110'
ymonth <- '201512'
apiKey <- '0QpsBacnY161CkT22m2WPZOjE4Ij80hQiXdq79044Aup3Oek+5oh7FauomqPINqmM3a1dJOPQQ3IMfOXYXSnZQ=='
res <- GET(url = URL,
query = list(LAWD_CD = areaCD,
DEAL_YMD = ymonth,
serviceKey = apiKey))
print(res)
text <- content(x = res, as = 'text')
print(x = text)
## 데이터 처리하기
library(jsonlite)
data <- fromJSON(txt = text)
str(object = data)
df <- data$response$body$items$item
str(object = df)
setwd(dir = 'C:/Users/DA/GitHub/R/works/rscript/DAwR/data')
list.files()
list.files()
library(writexl)
intstall('writexl')
install('writexl')
install.packages('writexl')
library(writexl)
write_xlsx(x = iris, path = 'iris.xlsx')
list.files()
library(readxl)
obj1 <- read_xlsx(path = 'iris.xlsx')
str(object = obj1)
write.csv(x = 객체형,
file = '저장할 csv 파일명',
sep = ',',
row.names = TRUE,
col.names = TRUE,
fileEncoding = '')
write.csv(x = iris, file = 'iris.csv')
list.files()
obj2 <- read.csv(file = 'iris.csv')
str(object = obj2)
write.csv(x = iris, file = 'iris.csv', row.names = FALSE)
obj2 <- read.csv(file = 'iris.csv')
str(object = obj2)
library(readr)
library(readr)
fileName <- 'APT_Price_Gangnam_2020.csv'
guess_encoding(file = fileName)
price <- read.csv(file = fileName, fileEncoding = 'UTF-8')
str(object = price)
saveRDS(object = iris, file = 'iris.RDS')
list.files()
obj3 <- readRDS(file = 'iris.RDS')
str(object = obj3)
save(iris, file = 'iris.RDA')
list.files()
load(file = 'iris.RDA')
save.image(file = 'irisALL.RDA')
list.files()
ls()
rm(list = ls())
load(file = 'irisALL.RDA')
table(iris$Species)
prop.table(x = table(iris$Species))
library(tidyberse)
library(tidyverse)
iris$Species %>% table() %>% prop.table()
iris %>%
select(Sepal.Length, Species) %>%
filter(Sepal.Length >= 5.2) %>%
group_by(Species) %>%
summarise(Count = n()) %>%
mutate(Pcnt = Count / sum(Count)) %>%
arrange(desc(x = Pcnt))
library(magrittr)
iris %>%
select(Sepal.Length, Species) %>%
filter(Sepal.Length >= 5.2) %>%
group_by(Species) %>%
summarise(Count = n()) %>%
mutate(Pcnt = Count / sum(Count)) %>%
arrange(desc(x = Pcnt))
library(dplyr)
iris %>%
select(Sepal.Length, Species) %>%
filter(Sepal.Length >= 5.2) %>%
group_by(Species) %>%
summarise(Count = n()) %>%
mutate(Pcnt = Count / sum(Count)) %>%
arrange(desc(x = Pcnt))
# 3 setosa        14 0.128
library(tidyverse)
url <- 'https://bit.ly/APT_Price_Gangnam_2020_csv'
guess_encoding(file = url)
price <- read.csv(file = url, fileEncoding = 'UTF-8')
str(object = price)
price %>% select(아파트, 거래금액) %>% head()
price %>% select(8, 2) %>% tail()
price %>% select(-일련번호) -> price
str(object = price)
source("C:/Users/DA/GitHub/R/works/rscript/DAwR/chap11.R", echo=TRUE)
price %>%
rename(아파트명 = 아파트, 아파트주소 = 도로명주소) %>%
head()
price %>% head()
price %>% filter(거래금액 >= 600000)
price %>% filter(거래금액 < 600000, 층 >= 60)
price %>% slice(1:5)
price %>% slice(seq(from = 1, to = 10, by = 2))
priceM %>%
mutate(아파트 = as.factor(x = 아파트)) %>%
str()
price %>%
mutate(아파트 = as.factor(x = 아파트)) %>%
str()
price %>% mutate(단위금액 = 거래금액 / 전용면적) -> price
head(x = price)
# === 기존 숫자형 컬럼 변경 ===
price %>%
mutate(거래금액 = 거래금액 / 10000,
단위금액 = round(x = 단위금액 * 3.3, digits = 0)) -> price
head(x = price)
price %>%
mutate(금액부분 = ifelse(test = 단위금액 >= 10000,
yes = '1억 이상',
no = '1억 미만')) -> price
head(x = price)
price %>%
mutate(금액구분2 = ifelse(test = 단위금액 >= 10000,
yes = '1억 이상',
no = ifelse(test = 단위금액 >= 5000,
yes = '5천 이상',
no = '5천 미만'))) %>%
head()
price %>%
mutate(금액구분2 = case_when(단위금액 >= 10000 ~ '1억 이상',
단위금액 >= 5000 ~ '5천 이상',
단위금액 >= = ~ '5천 미만')) %>%
price %>%
mutate(금액구분2 = case_when(단위금액 >= 10000 ~ '1억 이상',
단위금액 >= 5000 ~ '5천 이상',
단위금액 >= 0 ~ '5천 미만')) %>%
head()
price %>%
mutate(금액구분2 = case_when(단위금액 >= 10000 ~ '1억 이상',
단위금액 >= 5000 ~ '5천 이상',
단위금액 >= 0 ~ '5천 미만')) %>%
head()
library(tidyverse)
price %>%
mutate(금액구분2 = case_when(단위금액 >= 10000 ~ '1억 이상',
단위금액 >= 5000 ~ '5천 이상',
단위금액 >= 0 ~ '5천 미만')) %>%
head()
price %>%
group_by(월) %>%
summarise(거래건수 = n(), 평균금액 = mean(x = 거래금액))
price %>%
group_by(아파트, 금액구분) %>%
summarise(매매건수 = n()) -> elong
source("C:/Users/DA/GitHub/R/works/rscript/DAwR/chap11.R", echo=TRUE)
price %>%
group_by(아파트, 금액구분) %>%
summarise(매매건수 = n()) -> elong
price %>%
group_by(아파트, 금액구분) %>%
summarise(매매건수 = n()) -> elong
table(iris$Species)
prop.table(x = table(iris$Species))
library(tidyverse)
iris$Species %>% table() %>% prop.table() # shift + ctrl + m
library(magrittr)
library(dplyr)
iris %>% # 150행 5열
select(Sepal.Length, Species) %>% # 열 길이 2인 df 반환
filter(Sepal.Length >= 5.2) %>% # Sepal.length가 5.2 이상인 109행 df 반환
group_by(Species) %>% # 문자형 또는 범주형 컬럼을 데이터 그룹으로 나눔
summarise(Count = n()) %>% # Count 컬럼 생성, Species 컬럼 원소별 빈도수
mutate(Pcnt = Count / sum(Count)) %>% # Count 컬럼을 전체 빈도수로 나눠서 Pcnt 컬럼 생성, mutate() df 컬럼 변경에 사용
arrange(desc(x = Pcnt)) # 정렬
library(tidyverse)
url <- 'https://bit.ly/APT_Price_Gangnam_2020_csv' # 텍스트 데이터를 포함하는 링크로 문자형 벡터 url 생성
guess_encoding(file = url) # 인코딩 방식 확인
price <- read.csv(file = url, fileEncoding = 'UTF-8') # url에 포함된 텍스트 데이터를 읽고 df price 생성
str(object = price) # price 구조 확인
price %>% select(아파트, 거래금액) %>% head()
price %>% select(8, 2) %>% tail()
price %>% select(-일련번호) -> price # 파이프 연산자 때문에 코드의 가독성위해 -> 사용 <- 도 가능
str(object = price)
price %>%
rename(아파트명 = 아파트, 아파트주소 = 도로명주소) %>%
head()
price %>% head()
price %>% filter(거래금액 >= 600000)
price %>% filter(거래금액 < 600000, 층 >= 60)
price %>% slice(1:5)
price %>% slice(seq(from = 1, to = 10, by = 2))
price %>%
mutate(아파트 = as.factor(x = 아파트)) %>%
str()
price %>% mutate(단위금액 = 거래금액 / 전용면적) -> price #
head(x = price) #
# === 기존 숫자형 컬럼 변경 ===
price %>%
mutate(거래금액 = 거래금액 / 10000, # 만원 -> 억원
단위금액 = round(x = 단위금액 * 3.3, digits = 0)) -> price
head(x = price)
price %>%
mutate(금액부분 = ifelse(test = 단위금액 >= 10000,
yes = '1억 이상',
no = '1억 미만')) -> price
head(x = price)
price %>%
mutate(금액구분2 = ifelse(test = 단위금액 >= 10000,
yes = '1억 이상',
no = ifelse(test = 단위금액 >= 5000,
yes = '5천 이상',
no = '5천 미만'))) %>%
head()
price %>%
group_by(월) %>%
summarise(거래건수 = n(), 평균금액 = mean(x = 거래금액))
price %>%
group_by(아파트, 금액구분) %>%
summarise(매매건수 = n()) -> elong
price %>%
group_by(아파트, 금액부분) %>%
summarise(매매건수 = n()) -> elong
tail(x = elong)
price %>%
group_by(아파트, 금액부분) %>%  # 아파트와 금액부분 컬럼으로 그룹 지정, 빈도수 계산해서 매매건수 컬럼으로 생성한 결과를 elong에 할당
summarise(매매건수 = n()) -> elong # == summarize()
tail(x = elong)
head(elong)
elong %>%
spread(key = 금액부분, value = 매매건수, fill = 0) -> widen
head(x = widen)
widen %>%
gather(key = 금액타입, value = 거래건수, 2:3, na.rm = FALSE) %>% #1
head()
df <- price %>% select(아파트, 전용면적, 층, 거래금액, 단위금액)
df %>% arrange(desc(x = 거래금액)) %>% head()
# 컬럼명을 2개 이상 지정하면 결과값을 얻을 수 없음.
df %>% arrange(desc(x = 층, 거래금액)) %>% head()
source("C:/Users/DA/GitHub/R/works/rscript/DAwR/chap11.R", echo=TRUE)
df %>% arrange(desc(x = 층), desc(x = 거래금액)) %>% head()
df %>% arrange(desc(x = 층), 거래금액) %>% head()
getwd()
# [1] "C:/Users/DA/GitHub/R/works/rscript/DAwR"
setwd(dir = './data')
saveRDS(object = price, file = 'APT_Price_Gangnam_2020.RDS')
library(tidyverse)
getwd()
setwd(dir = './data')
list.files()
price <- readRDS(file = 'APT_Price_Gangnam_2020.RDS')
str(object = price)
fileName <- 'APT_Detail_Gangnam_2020.csv'
guess_encoding(file = fileName)
detail <- read.csv(file = fileName, fileEncoding = 'UTF-8')
str(object = detail)
x %>% is.na() %>% sum() %>% return()
sapply(X = detail, FUN = function(x) {
x %>% is.na() %>% sum() %>% return()
})
head(x = price$도로명주소, n = 10)
head(x = detail$doroJuso, n = 10)
set.seed(seed = 1234)
nums <- sample(x = 5, size = 10, replace = TRUE)
source("C:/Users/DA/GitHub/R/works/rscript/DAwR/chap12.R", echo=TRUE)
print(x = nums)
duplicated(x = nums)
duplicated(x = nums, fromLast = TRUE)
duplicated(x =nums) %>% sum()
duplicated(x = detail$doroJuso) %>% sum()
apt <- left_join(x = price,
y = detail,
by = c('도로명주소' = 'doroJuso'))
str(object = apt)
apt %>% select(-kaptCode, -kaptn) -> apt
apt %>% select(-kaptCode, -kaptName) -> apt
saveRDS(object = apt, file = 'APT_Dataset_Gangnam_2020.RDS')
library(tidyverse)
library(tidyverse)
getwd()
setw
setwd()
list.files()
apt <- readRDS(file = "APT_Dataset_Gangnam_2020.RDS")
str(object = apt)
