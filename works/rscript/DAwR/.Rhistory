df1$ㅜㅕㅡ
df1$num
df1$cha
df1$num >= 5
df1[df1$num >= 5, ]
# 데이터프레임에서 괄호 안 조건을 만족하는 행과 하나의 열을 선택하는 두 가지 방법
df1[df1$num >= 5, 'cha']
df1$cha[df1$num >= 5]
df1$int <- 11:15
str(object = df1)
cbind(df1, rep(x = TRUE, times = 5))
cbind(df1, log = rep(x = TRUE, times = 5))
str(object = df1)
df1 <- cbind(df1, log = rep(x = TRUE, times = 5))
str(object = df1)
df3 <- data.frame(num = 6, cha = 'f', int = 16, log = TRUE)
rbind(df1, df3)
#   num cha int  log
# 1   1   a  11 TRUE
# 2   3   b  12 TRUE
# 3   5   c  13 TRUE
# 4   7   d  14 TRUE
# 5   9   e  15 TRUE
# 6   6   f  16 TRUE
str(object = df1)
str(object = df1)
df1$num <- NULL
str(object = df1)
# === 행 또는 열 삭제 ===
dfq[-1, -1]
# === 행 또는 열 삭제 ===
df1[-1, -1]
df1[-1, ]
df1[, -1]
df$cha <- letters[1:5]
df1$cha <- letters[1:5]
print(x = df1)
df1$int[1] <- '11'
str(object = df1)
df1$int[1] <- '21'
str(object = df1)
df1$int[1] <- '11'
str(object = df1)
obj <- 1L
class(x = obj)
class(x = obj) == 'integer'
print(x = '정수입니다.')
print(x = '정수입니다!')
obj <- as.character(x = obj)
print(x = '정수입니다!')
obj <- as.character(x = obj)
if (class(x = obj) == 'integer') {
print(x = '정수입니다!')
}
print(x = '정수입니다!')
if (class(x = obj) == 'integer') {
print(x = '정수입니다!')
} else {
print(x = '정수가 아닙니다.')
}
print(x = '정수가 아닙니다!')
print(x = '숫자가 아닙니다!')
if (class(x = obj) == 'integer') {
print(x = '정수입니다!')
} else if (class(x = obj) == 'numeric') {
print(x = '실수입니다!')
} else {
print(x = '숫자가 아닙니다!')
}
score <- 10
if (score >= 70) {
grade <- '합격'
} else {
grade <- '불합격'
}
print(x = grade)
score <- c(100,69)
if (score >= 70) {
grade <- '합격'
} else {
grade <- '불합격'
}
print(x = grade) # [1] "불합격"
score <- c(100,69)
if (score >= 70) {
grade <- '합격'
} else {
grade <- '불합격'
} # Error in if (score >= 70) { : the condition has length > 1
print(x = grade) # [1] "불합격"
score <- c(100,69)
if (score >= 70) {
grade <- '합격'
} else {
grade <- '불합격'
} # Error in if (score >= 70) { : the condition has length > 1
print(x = grade) # [1] "불합격"
score <- c(100,69)
if (score >= 70) {
grade <- '합격'
} else {
grade <- '불합격'
} # Error in if (score >= 70) { : the condition has length > 1
score <- c(100,69)
if (score >= 70) {
grade <- '합격'
} else {
grade <- '불합격'
} # Error in if (score >= 70) { : the condition has length > 1
print(x = grade) # [1] "불합격"
score <- c(100,79)
if (score >= 70) {
grade <- '합격'
} else {
grade <- '불합격'
} # Error in if (score >= 70) { : the condition has length > 1
print(x = grade) # [1] "불합격"
score <- c(100,69)
if (score >= 70) {
grade <- '합격'
} else {
grade <- '불합격'
} # Error in if (score >= 70) { : the condition has length > 1
score <- c(100,69)
if (score >= 70) {
grade <- '합격'
} else {
grade <- '불합격'
} # Error in if (score >= 70) { : the condition has length > 1
print(x = grade) # [1] "불합격" ????? 첫번 째 요소만 사용해서 합격이어야 하는거 아님? 바뀐건가?
score <- c(100,69)
if (score >= 70) {
grade <- '합격'
} else {
grade <- '불합격'
}
print(x = grade)
score <-  seq(from = 40, to = 100, by = 10)
print(score)
score >= 70
ifelse(test = score >= 70, yes = '합격', no = '불합격')
df <- data.frame(score)
str(object = df)
df$grade <- ifelse(test = d$score >= 70, yes = '합격', no = '불합격')
df$grade <- ifelse(test = df$score >= 70, yes = '합격', no = '불합격')
print(x = df)
menu <- c('짜장면', '탕수육', '깐풍기', '짬뽕', '전가복', '샥스핀')
print(x = item)
for (item in menu) {
print(x = item)
}
item
for (item in menu) {
item
}
item
item
# [1] "짜장면"
# [1] "탕수육"
# [1] "깐풍기"
# [1] "짬뽕"
# [1] "전가복"
# [1] "샥스핀"
for (item in menu) {
item
}
item
item
item
print(item, '시킬까요?\n')
cat(객체명, 문자열, ... , sep = " ")
for (item in menu) {
cat(item, '시킬까요?\n')
}
for (item in menu) {
text <- paste(item, '시킬까요?\n')
print(x = text)
}
i <- 5
while (i > 0) {
print(x = i)
i <- i - 1
}
for (item in menu) {
if (item %in% c('짜장면', '짬뽕')) {
cat(item, '요리부터 주문합시다!\n', sep = '? ')
} else {
cat(item, '다음 메뉴는 뭔가요?\n', sep = '? ')
}
}
for (item in menu) {
if(item %in% c('짜장면', '짬뽕')) {
next
cat(item, '요리부터 주문합시다!\n', sep = '? ')
} else {
cat(item, '다음 메뉴는 뭔가요?\n', sep = '? ')
}
}
# === while문에서 break ===
i <- 0
while (TRUE) {
print(x = i)
i <- i + 1
if(i > 5) {
break
}
}
for (i in 0:9) {
print(x = i)
if(i > 5) {
break
}
}
i <- 0
repeat {
print(x = i)
i <- i + 1
if (i > 5) {
break
}
}
Pythagoras <- function (a, b) {
c <- sprt (x = a^2 + b^2)
return(c)
}
Pythagoras(a = 3, b = 4)
Pythagoras <- function (a, b) {
c <- sprt(x = a^2 + b^2)
return(c)
}
Pythagoras(a = 3, b = 4)
Pythagoras <- function (a, b) {
c <- sprt (x = a^2 + b^2)
return(c)
}
Pythagoras(a = 3, b = 4)
install.packages('kknn')
library(kknn)
Pythagoras <- function (a, b) {
c <- sprt (x = a^2 + b^2)
return(c)
}
Pythagoras(a = 3, b = 4)
install.packages("kknn")
library(kknn)
Pythagoras <- function (a, b) {
c <- sprt (x = a^2 + b^2)
return(c)
}
Pythagoras(a = 3, b = 4)
library(kknn)
Pythagoras <- function (a, b) {
c <- sprt (x = a^2 + b^2)
return(c)
}
Pythagoras(a = 3, b = 4)
Pythagoras <- function (a, b) {
c <- utils::sprt (x = a^2 + b^2)
return(c)
}
Pythagoras(a = 3, b = 4)
install.packages("kknn")
install.packages("kknn")
library(kknn)
Pythagoras <- function (a, b) {
c <- sprt (x = a^2 + b^2)
return(c)
}
Pythagoras(a = 3, b = 4)
c <- sqrt (x = a^2 + b^2)
Pythagoras <- function (a, b) {
c <- sqrt (x = a^2 + b^2)
return(c)
}
Pythagoras(a = 3, b = 4)
score <- 100
if (score >= 90) {
grade <- 'A'
} else if (score >= 80) {
grade <- 'B'
} else if (score >= 70) {
grade <- 'C'
} else if (score >= 60) {
grade <- 'D'
} else {
grade <- 'F'
}
print(x = grade)
getGrade <- function (score) {
if (score >= 90) {
grade <- 'A'
} else if (score >= 80) {
grade <- 'B'
} else if (score >= 70) {
grade <- 'C'
} else if (score >= 60) {
grade <- 'D'
} else {
grade <- 'F'
}
return(grade)
}
getGrade(score = 100)
rm(getGrade)
source(file = 'myFuns.R', encoding = 'UTF-8')
getGrade(score = 100)
guessHeight <- function(name = '홍길동', height = 173) {
answer <- paste(name, '님의 키는', height, 'cm입니다.')
return(answer)
}
guessHeight()
guessHeight(name = '정우성', height = 186)
## 작업 경로 확인 및 변경
getwd()
list.files()
list.files()
setwd(dir = 'C:/Users/DA/GitHub/R/works/rscript/DAwR/data')
install.packages('httr')
library(httr)
setwd(dir = 'C:/Users/DA/GitHub/R/works/rscript/DAwR/data')
URL <- 'http://openapi/molit.go.kr:8--1/OpenAPI_ToolInstallPackage/service/rest/RTMSOBJSvc/getRTMDataSvcAptTrade'
areaCD <- '11110'
ymonth <- '201512'
apiKey <- '0QpsBacnY161CkT22m2WPZOjE4Ij80hQiXdq79044Aup3Oek+5oh7FauomqPINqmM3a1dJOPQQ3IMfOXYXSnZQ=='
res <- GET(url = URL,
query = list(LAWD_CD = areaCD,
DEAL_YMD = ymonth,
serviceKey = apiKey))
print(res)
res <- GET(url = URL,
query = list(LAWD_CD = areaCD,
DEAL_YMD = ymonth,
serviceKey = apiKey))
URL <- 'http://openapi/molit.go.kr:8081/OpenAPI_ToolInstallPackage/service/rest/RTMSOBJSvc/getRTMSDataSvcAptTrade'
areaCD <- '11110'
ymonth <- '201512'
apiKey <- '0QpsBacnY161CkT22m2WPZOjE4Ij80hQiXdq79044Aup3Oek+5oh7FauomqPINqmM3a1dJOPQQ3IMfOXYXSnZQ=='
res <- GET(url = URL,
query = list(LAWD_CD = areaCD,
DEAL_YMD = ymonth,
serviceKey = apiKey))
print(res)
print(res)
res <- GET(url = URL,
query = list(LAWD_CD = areaCD,
DEAL_YMD = ymonth,
serviceKey = apiKey))
library(httr)
URL <- 'http://openapi/molit.go.kr:8081/OpenAPI_ToolInstallPackage/service/rest/RTMSOBJSvc/getRTMSDataSvcAptTrade'
areaCD <- '11110'
ymonth <- '201512'
apiKey <- '0QpsBacnY161CkT22m2WPZOjE4Ij80hQiXdq79044Aup3Oek+5oh7FauomqPINqmM3a1dJOPQQ3IMfOXYXSnZQ=='
res <- GET(url = URL,
query = list(LAWD_CD = areaCD,
DEAL_YMD = ymonth,
serviceKey = apiKey))
URL <- 'http://openapi.molit.go.kr:8081/OpenAPI_ToolInstallPackage/service/rest/RTMSOBJSvc/getRTMSDataSvcAptTrade'
areaCD <- '11110'
ymonth <- '201512'
apiKey <- '0QpsBacnY161CkT22m2WPZOjE4Ij80hQiXdq79044Aup3Oek+5oh7FauomqPINqmM3a1dJOPQQ3IMfOXYXSnZQ=='
res <- GET(url = URL,
query = list(LAWD_CD = areaCD,
DEAL_YMD = ymonth,
serviceKey = apiKey))
print(res)
text <- content(x = res, as = 'text')
print(x = text)
## 데이터 처리하기
library(jsonlite)
data <- fromJSON(txt = text)
str(object = data)
df <- data$response$body$items$item
str(object = df)
setwd(dir = 'C:/Users/DA/GitHub/R/works/rscript/DAwR/data')
list.files()
list.files()
library(writexl)
intstall('writexl')
install('writexl')
install.packages('writexl')
library(writexl)
write_xlsx(x = iris, path = 'iris.xlsx')
list.files()
library(readxl)
obj1 <- read_xlsx(path = 'iris.xlsx')
str(object = obj1)
write.csv(x = 객체형,
file = '저장할 csv 파일명',
sep = ',',
row.names = TRUE,
col.names = TRUE,
fileEncoding = '')
write.csv(x = iris, file = 'iris.csv')
list.files()
obj2 <- read.csv(file = 'iris.csv')
str(object = obj2)
write.csv(x = iris, file = 'iris.csv', row.names = FALSE)
obj2 <- read.csv(file = 'iris.csv')
str(object = obj2)
library(readr)
library(readr)
fileName <- 'APT_Price_Gangnam_2020.csv'
guess_encoding(file = fileName)
price <- read.csv(file = fileName, fileEncoding = 'UTF-8')
str(object = price)
saveRDS(object = iris, file = 'iris.RDS')
list.files()
obj3 <- readRDS(file = 'iris.RDS')
str(object = obj3)
save(iris, file = 'iris.RDA')
list.files()
load(file = 'iris.RDA')
save.image(file = 'irisALL.RDA')
list.files()
ls()
rm(list = ls())
load(file = 'irisALL.RDA')
table(iris$Species)
prop.table(x = table(iris$Species))
library(tidyberse)
library(tidyverse)
iris$Species %>% table() %>% prop.table()
iris %>%
select(Sepal.Length, Species) %>%
filter(Sepal.Length >= 5.2) %>%
group_by(Species) %>%
summarise(Count = n()) %>%
mutate(Pcnt = Count / sum(Count)) %>%
arrange(desc(x = Pcnt))
library(magrittr)
iris %>%
select(Sepal.Length, Species) %>%
filter(Sepal.Length >= 5.2) %>%
group_by(Species) %>%
summarise(Count = n()) %>%
mutate(Pcnt = Count / sum(Count)) %>%
arrange(desc(x = Pcnt))
library(dplyr)
iris %>%
select(Sepal.Length, Species) %>%
filter(Sepal.Length >= 5.2) %>%
group_by(Species) %>%
summarise(Count = n()) %>%
mutate(Pcnt = Count / sum(Count)) %>%
arrange(desc(x = Pcnt))
# 3 setosa        14 0.128
library(tidyverse)
url <- 'https://bit.ly/APT_Price_Gangnam_2020_csv'
guess_encoding(file = url)
price <- read.csv(file = url, fileEncoding = 'UTF-8')
str(object = price)
price %>% select(아파트, 거래금액) %>% head()
price %>% select(8, 2) %>% tail()
price %>% select(-일련번호) -> price
str(object = price)
source("C:/Users/DA/GitHub/R/works/rscript/DAwR/chap11.R", echo=TRUE)
price %>%
rename(아파트명 = 아파트, 아파트주소 = 도로명주소) %>%
head()
price %>% head()
price %>% filter(거래금액 >= 600000)
price %>% filter(거래금액 < 600000, 층 >= 60)
price %>% slice(1:5)
price %>% slice(seq(from = 1, to = 10, by = 2))
priceM %>%
mutate(아파트 = as.factor(x = 아파트)) %>%
str()
price %>%
mutate(아파트 = as.factor(x = 아파트)) %>%
str()
price %>% mutate(단위금액 = 거래금액 / 전용면적) -> price
head(x = price)
# === 기존 숫자형 컬럼 변경 ===
price %>%
mutate(거래금액 = 거래금액 / 10000,
단위금액 = round(x = 단위금액 * 3.3, digits = 0)) -> price
head(x = price)
price %>%
mutate(금액부분 = ifelse(test = 단위금액 >= 10000,
yes = '1억 이상',
no = '1억 미만')) -> price
head(x = price)
price %>%
mutate(금액구분2 = ifelse(test = 단위금액 >= 10000,
yes = '1억 이상',
no = ifelse(test = 단위금액 >= 5000,
yes = '5천 이상',
no = '5천 미만'))) %>%
head()
price %>%
mutate(금액구분2 = case_when(단위금액 >= 10000 ~ '1억 이상',
단위금액 >= 5000 ~ '5천 이상',
단위금액 >= = ~ '5천 미만')) %>%
price %>%
mutate(금액구분2 = case_when(단위금액 >= 10000 ~ '1억 이상',
단위금액 >= 5000 ~ '5천 이상',
단위금액 >= 0 ~ '5천 미만')) %>%
head()
price %>%
mutate(금액구분2 = case_when(단위금액 >= 10000 ~ '1억 이상',
단위금액 >= 5000 ~ '5천 이상',
단위금액 >= 0 ~ '5천 미만')) %>%
head()
library(tidyverse)
price %>%
mutate(금액구분2 = case_when(단위금액 >= 10000 ~ '1억 이상',
단위금액 >= 5000 ~ '5천 이상',
단위금액 >= 0 ~ '5천 미만')) %>%
head()
price %>%
group_by(월) %>%
summarise(거래건수 = n(), 평균금액 = mean(x = 거래금액))
