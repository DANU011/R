col = rep(c(2, 4), 4)) # 2,4 색 번호
# 실습: 막대 차트에서 색상 이름을 사용하여 막대의 색상 지정하기
barplot(chart_data, xlim = c(0, 600), horiz = T,
ylab = "매출액(단위: 만원)",
xlab = "년도별 분기 현황",
space = 1, cex.names = 0.8,
main = "2018년도 vs 2019년도 매출현항 비교",
col = rep(c("red", "green"), 4))
# 실습: 누적 막대 차트 그리기
# 단계 1: 메모리로 데이터 가져오기
data("VADeaths")
VADeaths
# 단계 2: VADeaths 데이터 셋 구조 보기
str(VADeaths)
#num [1:5, 1:4] 행이5개 열이4개
#attr(*, "dimnames")=List of 2 ????
class(VADeaths)
# 단계 3: 개별 차트와 누적 차트 그리기
par(mfrow = c(1, 2))
# 그래프 그릴 때 par(mfrow = c(행에 몇개, 열에 몇개))
# mfrow 파라미터는 그래프를 여러 개 그리는 경우
barplot(VADeaths, beside = T, col = rainbow(5),
main = "미국 버지니아주 하위계층 사망비율")
legend(19, 71, c("50-54", "55-59", "60-64", "65-69", "70-74"),
cex = 0.8, fill = rainbow(5))
barplot(VADeaths, beside = F, col = rainbow(5))
title(main = "미국 버지니아주 하위계층 사망비율", font.main = 4)
legend(3.8, 200, c("50-54", "55-59", "60-64", "65-69", "70-74"),
cex = 0.8, fill = rainbow(5))
# 실습: 점 차트(dotchart) 도움말 보기
help(dotchart)
# 실습: 점 차트 사용하기
par(mfrow = c(1, 1))
dotchart(chart_data, color = c("blue", "red"),
lcolor = "black", pch = 1:2,
labels = names(chart_data),
xlab = "매출액",
main = "분기별 판매현황: 점차트 시각화",
cex = 1.2)
# 실습: 원형 차트 도움말 보기
help(pie)
#실습: 분기별 매출현황을 파이 차트로 시각화하기
par(mfrow = c(1, 1))
pie(chart_data, labels = names(chart_data), col = rainbow(8), cex = 1.2)
title("2018~2019년도 분기별 매출현황")
#실습: 분기별 매출현황을 파이 차트로 시각화하기
par(mfrow = c(1, 1))
pie(chart_data, labels = names(chart_data), col = rainbow(8), cex = 1.2)
title("2018~2019년도 분기별 매출현황")
# 실습: VADeaths 데이터 셋을 상자 그래프로 시각화하기
# 단계 1: "notch = FALSE"일 때
boxplot(VADeaths, range = 0)
VADeaths
# 실습: VADeaths 데이터 셋을 상자 그래프로 시각화하기
# 단계 1: "notch = FALSE"일 때
boxplot(VADeaths, range = 0)
# 단계 2: "notch = TRUE"일 때
boxplot(VADeaths, range = 0, notch = T)
#실습: 분기별 매출현황을 파이 차트로 시각화하기
par(mfrow = c(1, 1))
pie(chart_data, labels = names(chart_data), col = rainbow(8), cex = 1.2)
title("2018~2019년도 분기별 매출현황")
VADeaths
# 실습: VADeaths 데이터 셋을 상자 그래프로 시각화하기
# 단계 1: "notch = FALSE"일 때
boxplot(VADeaths, range = 0)
airquality
str(airquality)
boxplot(airquality)
VADeaths
airquality
str(airquality)
boxplot(airquality)
#실습: 분기별 매출현황을 파이 차트로 시각화하기
par(mfrow = c(1, 1))
pie(chart_data, labels = names(chart_data), col = rainbow(8), cex = 1.2)
VADeaths
airquality
str(airquality)
boxplot(airquality)
# 실습: VADeaths 데이터 셋을 상자 그래프로 시각화하기
# 단계 1: "notch = FALSE"일 때
boxplot(VADeaths, range = 0)
# 단계 2: "notch = TRUE"일 때
boxplot(VADeaths, range = 0, notch = T)
abline(h = 37, lty = 3, col = "red")
# 실습: VADeaths 데이터 셋의 요약 통계량 보기
summary(VADeaths)
# 실습: iris 데이터 셋 가져오기
data(iris)
names(iris)
str(iris)
head(iris)
# 실습: iris 데이터 셋의 꽃받침 길이(Sepal.Length) 칼럼으로 히스토그램 시각화하기
summary(iris$Sepal.Length)
hist(iris$Sepal.Length, xlab = "iris$Sepal.Length", col = "magenta",
main = "iris 꽃 받침 길이 Histogram", xlim = c(4.3, 7.9))
# 실습: iris 데이터 셋의 꽃받침 너비(Sepal.Width) 칼럼으로 히스토그램 시각화하기
summary(iris$Sepal.Width)
hist(iris$Sepal.Width, xlab = "iris$Sepal.Width", col = "mistyrose",
main = "iris 꽃받침 너비 Histogram", xlim = c(2.0, 4.5))
# 실습: 히스토그램에서 빈도와 밀도 표현하기
# 단계 1: 빈도수에 의해서 히스토그램 그리기
par(mfrow = c(1, 2))
hist(iris$Sepal.Width, xlab = "iris$Sepal.Width",
col = "green",
main = "iris 꽃받침 너비 Histogram: 빈도수", xlim = c(2.0, 4.5))
# 단계 2: 확률 밀도에 의해서 히스토그램 그리기
hist(iris$Sepal.Width, xlab = "iris.$Sepal.Width",
col = "mistyrose", freq = F,
main = "iris 꽃받침 너비 Histogram: 확률 밀도", xlim = c(2.0, 4.5))
lines(density(iris$Sepal.Width), col = "red")
# 실습: 정규분포 추정 곡선 나타내기
# 단계 1: 계급을 밀도로 표현한 히스토그램 시각화
par(mfrow = c(1, 1))
hist(iris$Sepal.Width, xlab = "iris$Sepal.Width", col = "mistyrose",
freq = F, main = "iris 꽃받침 너비 Histogram", xlim = c(2.0, 4.5))
# 단계 2: 히스토그램에 밀도를 기준으로 분포곡선 추가
lines(density(iris$Sepal.Width), col = "red")
# 단계 3: 히스토그램에 정규분포 추정 곡선 추가
x <- seq(2.0, 4.5, 0.1)
lines(density(iris$Sepal.Width), col = "red")
# 단계 2: 확률 밀도에 의해서 히스토그램 그리기
hist(iris$Sepal.Width, xlab = "iris.$Sepal.Width",
col = "mistyrose", freq = F,
main = "iris 꽃받침 너비 Histogram: 확률 밀도", xlim = c(2.0, 4.5))
lines(density(iris$Sepal.Width), col = "red")
# 실습: 정규분포 추정 곡선 나타내기
# 단계 1: 계급을 밀도로 표현한 히스토그램 시각화
par(mfrow = c(1, 1))
hist(iris$Sepal.Width, xlab = "iris$Sepal.Width", col = "mistyrose",
freq = F, main = "iris 꽃받침 너비 Histogram", xlim = c(2.0, 4.5))
# 단계 2: 히스토그램에 밀도를 기준으로 분포곡선 추가
lines(density(iris$Sepal.Width), col = "red")
# 실습: 히스토그램에서 빈도와 밀도 표현하기
# 단계 1: 빈도수에 의해서 히스토그램 그리기
par(mfrow = c(1, 2))
hist(iris$Sepal.Width, xlab = "iris$Sepal.Width",
col = "green",
main = "iris 꽃받침 너비 Histogram: 빈도수", xlim = c(2.0, 4.5))
# 단계 2: 확률 밀도에 의해서 히스토그램 그리기
hist(iris$Sepal.Width, xlab = "iris.$Sepal.Width",
col = "mistyrose", freq = F,
main = "iris 꽃받침 너비 Histogram: 확률 밀도", xlim = c(2.0, 4.5))
lines(density(iris$Sepal.Width), col = "red")
# 실습: 히스토그램에서 빈도와 밀도 표현하기
# 단계 1: 빈도수에 의해서 히스토그램 그리기
par(mfrow = c(1, 2))
hist(iris$Sepal.Width, xlab = "iris$Sepal.Width",
col = "green",
main = "iris 꽃받침 너비 Histogram: 빈도수", xlim = c(2.0, 4.5))
# 단계 2: 확률 밀도에 의해서 히스토그램 그리기
hist(iris$Sepal.Width, xlab = "iris.$Sepal.Width",
col = "mistyrose", freq = F,
main = "iris 꽃받침 너비 Histogram: 확률 밀도", xlim = c(2.0, 4.5))
lines(density(iris$Sepal.Width), col = "red")
# 실습: 정규분포 추정 곡선 나타내기
# 단계 1: 계급을 밀도로 표현한 히스토그램 시각화
par(mfrow = c(1, 1))
hist(iris$Sepal.Width, xlab = "iris$Sepal.Width", col = "mistyrose",
freq = F, main = "iris 꽃받침 너비 Histogram", xlim = c(2.0, 4.5))
# 단계 2: 히스토그램에 밀도를 기준으로 분포곡선 추가
lines(density(iris$Sepal.Width), col = "red")
# 단계 3: 히스토그램에 정규분포 추정 곡선 추가
x <- seq(2.0, 4.5, 0.1)
curve(dnorm(x, mean = mean(iris$Sepal.Width),
sd = sd(iris$Sepal.Width)),
col = "blue", add = T)
# 실습: 산점도 그래프에 대각선과 텍스트 추가하기
# 단계 1: 기본 산점도 시각화
price <- runif(10, min = 1, max = 100)
plot(price, col = "red")
line_chart = 1:100
plot(line_chart, type = "l", col = "red", axes = F, ann = F)
# 실습: 산점도 그래프에 대각선과 텍스트 추가하기
# 단계 1: 기본 산점도 시각화
price <- runif(10, min = 1, max = 100)
# runif > uniform 분포를 따르는 random 변수 생성 > 난수생성
plot(price, col = "red")
# 단계 2: 대각선 추가
par(new = T)
line_chart = 1:100
plot(line_chart, type = "l", col = "red", axes = F, ann = F)
# 단계 3: 텍스트 추가
text(70, 80, "대각선 추가", col = "blue")
# 실습: type 속성으로 산점도 그리기
par(mfrow = c(2, 2))
plot(price, type = "l")
plot(price, type = "o")
plot(price, type = "h")
plot(price, type = "s")
# 실습: pch 속성으로 산점도 그리기
par(mfrow = c(2, 2))
plot(price, type = "o", pch = 5)
plot(price, type = "o", pch = 15)
plot(price, type = "o", pch = 20, col = "blue")
plot(price, type = "o", pch = 20, col = "orange", cex = 1.5)
plot(price, type = "o", pch = 20, col = "green", cex = 2.0, lwd = 3)
plot(price, type = "o", pch = 5)
# 실습: pch 속성으로 산점도 그리기
par(mfrow = c(2, 2))
plot(price, type = "o", pch = 5)
plot(price, type = "o", pch = 15)
plot(price, type = "o", pch = 20, col = "blue")
plot(price, type = "o", pch = 20, col = "orange", cex = 1.5)
plot(price, type = "o", pch = 20, col = "green", cex = 2.0, lwd = 3)
plot(price, type = "o", pch = 50)
plot(price, type = "o", pch = 5) #phc
plot(price, type = "o", pch = 50)
plot(price, type = "o", pch = 30)
plot(price, type = "o", pch = 40)
plot(price, type = "o", pch = 60)
plot(price, type = "o", pch = 25)
plot(price, type = "o", pch = 15)
plot(price, type = "o", pch = 50)
plot(price, type = "o", pch = 50, col = "blue")
plot(price, type = "o", pch = 15, col = "orange", cex = 1.5)
# 선 굵기 다르게
par(mfrow=c(1,1))
plot(price, type = "o", pch = 20, col = "green", cex = 2.0, lwd = 3)
# plot() 함수의 시각화 도구 목록 보기
methods("plot")
# plot() 함수에서 시계열 객체 사용하여 추세선 그리기
data("WWWusage")
str(WWWusage)
plot(WWWusage)     # plot.ts(WWWusage)와 같다.
#=========================================================
# 실습: 중복된 자료의 수 만큼 점의 크기 확대하기
# 단계 1: 두 개의 벡터 객체 준비
x <- c(1, 2, 3, 4, 2, 4)
y <- rep( 2, 6)
x; y
help(rep)
# 단계 2: 교차 테이블 작성
table(x, y)
x1 <-c(1,2,3,4,2,4)
y1 <-c(2,2,4,5,4)
x1
y1
y1<-<-c(2,2,4,5,4,3)
y1<-c(2,2,4,5,4,3)
x1;y1
table(x1,y1)
plot(x1,y1)
y1<-c(2,2,4,5,2,3)
y1<-c(2,2,4,5,2,2)
table(x1,y1)
plot(x1,y1)
# 단계 4: 교차 테이블로 데이터프레임 생성
xy.df <- as.data.frame(table(x, y))
xy.df
xy.df <-as.data.frame(tabel(x1,y1))
table(x1,y1) #2
plot(x1,y1) #3
xy.df <-as.data.frame(tabel(x1,y1))
xy.df <-as.data.frame(tabel(x1,y1))
xy.df
#==========연습=============
x1 <-c(1,2,3,4,2,4) #1
y1<-c(2,2,4,5,2,2)
x1
y1
x1;y1
table(x1,y1) #2
plot(x1,y1) #3
xy.df <-as.data.frame(tabel(x1,y1))
xy.df
plot(x1, y1,
pch = "@", col = "blue", cex = 0.5 * xy.df$Freq,
xlab = "x 벡터의 원소", ylab = "y 벡터 원소")
plot(x1, y1,
pch = "@", col = "blue", cex = 0.5 * xy.df$Freq,
xlab = "x 벡터의 원소", ylab = "y 벡터 원소")
# 실습: galton 데이터 셋을 대상으로 중복된 자료 시각화하기
# 단계 1: galton 데이터셋 가져오기
library(UsingR)
data(galton)
# 단계 2: 교차테이블을 작성하고, 데이프레임으로 변환
galtonData <- as.data.frame(table(galton$child, galton$parent))
head(galtonData)
# 단계 3: 칼럼 단위 추출
names(galtonData) = c("child", "parent", "freq")
head(galtonData)
parent <- as.numeric(galtonData$parent)
child <- as.numeric(galtonData$child)
# 단계 4: 점의 크기 확대
par(mfrow = c(1, 1))
plot(parent, child,
pch = 21, col = "blue", bg = "green",
cex = 0.2 * galtonData$freq,
xlab = "parent", ylab = "child")
# 실습: iris 데이터 셋의 4개 변수를 상호 비교
attributes(iris)
pairs(iris[iris$Species == "virginica", 1:4])
pairs(iris[iris$Species == "setosa", 1:4])
head(iris)
pairs(iris[iris$Species == "virginica", 1:4])
pairs(iris[iris$Species == "setosa", 1:4])
pairs(iris[iris$Species == "virginica", 1:4])
pairs(iris[iris$Species == "setosa", 1:4])
# 실습: 3차원으로 산점도 시각화하기
# 단계 1: 3차원 산점도를 위한 scatterplot3d 패키지 설치 및 로딩
install.packages("scatterplot3d")
library(scatterplot3d)
# 단계 2: 꽃의 종류별 분류
iris_setosa = iris[iris$Species == 'setosa', ]
iris_versicolor = iris[iris$Species == 'versicolor', ]
iris_virginica = iris[iris$Species == 'virginica', ]
# 단계 3: 3차원 틀 생성하기
d3 <- scatterplot3d(iris$Petal.Length,
iris$Sepal.Length,
iris$Sepal.Width,
type = 'n')
# 단계 4: 3차원 산점도 시각화
d3$points3d(iris_setosa$Petal.Length,
iris_setosa$Sepal.Length,
iris_setosa$Sepal.Width,
bg = 'orange', pch = 21)
d3$points3d(iris_versicolor$Petal.Length,
iris_versicolor$Sepal.Length,
iris_versicolor$Sepal.Width,
bg = 'blue', pch = 23)
d3$points3d(iris_virginica$Petal.Length,
iris_virginica$Sepal.Length,
iris_virginica$Sepal.Width,
bg = 'green', pch = 25)
# 실습: iris 데이터 셋을 대상으로 '%>%' 기호를 이용하여 함수 적용하기
install.packages("dplyr")
#'Dataframe + Pliers' d+plyr 데이터프레임을 다루는 공구
library(dplyr)
iris %>% head()
iris %>% head() %>% subset(Sepal.Length >= 5.0)
# 실습: dplyr 패키지와 hflight 데이터 셋 설치
install.packages(c("dplyr", "hflights"))
install.packages(c("dplyr", "hflights"))
library(dplyr)
library(hflights)
str(hflights)
# 실습: tbl_df() 함수 사용하기
hflights_df <- tbl_df(hflights)
hflights_df
# 실습: tbl_df() 함수 사용하기
hflights_df <- tbl_df(hflights)
hflights_df
# 실습: hflights_df를 대상으로 특정일의 데이터 추출하기
filter(hflights_df, Month == 1 & DayofMonth == 2)  # 1월 2일 데이터 추출
# 실습: hflights_df를 대상으로 지정된 월의 데이터 추출하기
filter(hflights_df, Month == 1 | Month == 2) # 1월 또는 2월 데이터 추출
# 실습: hflights_df를 대상으로 지정된 월의 데이터 추출하기
filter(hflights_df, Month == 1 & Month == 2) # 1월 또는 2월 데이터 추출
# 실습: hflights_df를 대상으로 데이터 정렬하기
arrange(hflights_df, Year, Month, DepTime, ArrTime)
# 실습: hflights_df를 대상으로 지정된 칼럼 데이터 검색하기
select(hflights_df, Year, Month, DepTime, ArrTime)
# 실습: hflights_df를 대상으로 칼럼의 범위로 검색하기
select(hflights_df, Year:ArrTime)
# 실습: hflights_df에서 출발 지연시간과 도착 지연시간의 차이를 계산한 칼럼 추가하기
mutate(hflights_df, gain = ArrTime - DepTime,
gain_per_hour = gain / (AirTime / 60))
select(hflights_df-(Year:Deptime))
# 실습: hflights_df를 대상으로 칼럼의 범위로 검색하기
select(hflights_df, Year:ArrTime) # Year:ArrTime 범위
select(hflights_df-(Year:Deptime))
# 실습: hflights_df에서 출발 지연시간과 도착 지연시간의 차이를 계산한 칼럼 추가하기
mutate(hflights_df, gain = ArrTime - DepTime,
gain_per_hour = gain / (AirTime / 60))
colnames(hflights_df)
# 실습: mutate() 함수에 의해 추가된 칼럼 보기
select(mutate(hflights_df, gain = ArrDelay - DepDelay,
gain_per_hour = gain / (AirTime / 60)),
Year, Month, ArrDelay, DepDelay, gain, gain_per_hour)
# 실습: hflights_df에서 비행시간의 평균 구하기
summarise(hflights_df, avgAirTime = mean(AirTime, na.rm = TRUE))
hflights_df %>% summarise(avgAirTime = mean(AirTime, na.rm = TRUE))
# 실습: hflights_df의 관측치 길이 구하기
summarise(hflights_df, cnt = n(),
delay = mean(AirTime, na.rm = TRUE))
# 실습: 도착시간(ArrTime)의 표준편차와 분산 계산하기
summarise(hflights_df, arrTimeSd = sd(ArrTime, na.rm = TRUE),
arrTimeVar = var(ArrTime, na.rm = T))
# 실습: 집단변수를 이용하여 그룹화하기
species <- group_by(iris, Species)
str(species)
species
head(iris)
species
# 실습: 공통변수를 이용하여 내부조인(inner_join)하기
# 단계 1: join 실습용 데이터프레임 생성
df1 <- data.frame(x = 1:5, y = rnorm(5))
df2 <- data.frame(x = 2:6, z = rnorm(5))
df1
df2
# 단계 2: inner_join 하기
inner_join(df1, df2, by = 'x')
# 실습: 집단변수를 이용하여 그룹화하기
species <- group_by(iris, Species)
head(iris)
str(species)
species
# 실습: 공통변수를 이용하여 내부조인(inner_join)하기
# 단계 1: join 실습용 데이터프레임 생성
df1 <- data.frame(x = 1:5, y = rnorm(5))
df2 <- data.frame(x = 2:6, z = rnorm(5))
df1
df2
# 단계 2: inner_join 하기
inner_join(df1, df2, by = 'x')
# 단계 2: inner_join 하기
inner_join(df1, df2, by = 'x')
# 실습: 공통변수를 이용하여 왼쪽 조인(left_join)하기
left_join(df1, df2, by = 'x')
# 실습: 공통변수를 이용하여 오른쪽 조인(right_join)하기
right_join(df1, df2, by = 'x')
# 실습: 공통변수를 이용하여 전체 조인(full_join)하기
full_join(df1, df2, by = 'x')
# 실습: 두 개의 데이터프레임을 행 단위로 합치기
# 단계 1: 실습을 위한 데이터프레임 생성
df1 <- data.frame(x = 1:5, y = rnorm(5))
df2 <- data.frame(x = 6:10, y = rnorm(5))
df1
df2
# 실습: 두 개의 데이터프레임을 행 단위로 합치기
# 단계 1: 실습을 위한 데이터프레임 생성
df1 <- data.frame(x = 1:5, y = rnorm(5))
df2 <- data.frame(x = 6:10, y = rnorm(5))
df1
df2
# 단계 2: 데이터프레임 합치기
df_rows <- bind_rows(df1, df2)
df_rows
# 실습: 두 개의 데이터프레임을 열 단위로 합치기
df_cols <- bind_cols(df1, df2)
df_cols
# 실습: 데이터프레임의 칼럼명 수정하기
df_rename <-rename(df_cols, x2 = x1)
df_rename <- rename(df_rename, y2 = y1)
df_rename
df_cols
# 실습: 데이터프레임의 칼럼명 수정하기
df_rename <-rename(df_cols, x2 = x...3)
df_rename <- rename(df_rename, y2 = y...4)
df_rename
df_rename
# 실습: reshape2 패키지 설치와 데이터 가져오기
install.packages("reshape2")
data <- read.csv("C:/Rwork/Part-II/data.csv")
data
library(reshape2)
# 실습: 넓은 형식(wide format)으로 변경하기
wide <- dcast(data, Customer_ID ~ Date, sum)
wide
data <- read.csv("C:/Rwork/Part-II/data.csv")
data
# 실습: 넓은 형식(wide format)으로 변경하기
wide <- dcast(data, Customer_ID ~ Date, sum)
wide
# 실습: 파일 저장 및 읽기
setwd("C:/Rwork/Part-II")
write.csv(wide, "wide.csv", row.names = FALSE)
wide <- read.csv("wide.csv")
colnames(wide) <- c('Customer_ID', 'day1', 'day2', 'day3',
'day4', 'day5', 'day6', 'day7')
wide
# 실습: 넓은 형식의 데이터를 긴 형식으로 변경하기
# 단계 1: 데이터를 긴 형식으로 변경하기
long <- melt(wide, id = "Customer_ID")
long
# 실습: 넓은 형식의 데이터를 긴 형식으로 변경하기
# 단계 1: 데이터를 긴 형식으로 변경하기
long <- melt(wide, id = "Customer_ID")
long
wide
# 실습: 넓은 형식의 데이터를 긴 형식으로 변경하기
# 단계 1: 데이터를 긴 형식으로 변경하기
long <- melt(wide, id = "Customer_ID")
long
# 단계 2: 칼럼명 변경하기
name <- c("Customer_ID", "Date","Buy")
colnames(long) <- name
head(long)
# 실습: smiths 데이터 셋 확인하기
# 단계 1: smiths 데이터 셋 가져오기
data("smiths")
smiths
# 단계 2: 넓은 형식의 smiths 데이터 셋을 긴 형식으로 변경
long <- melt(id = 1:2, smiths)
long
# 단계 3: 긴 형식을 넓은형식으로 변경하기
dcast(long, subject + time ~ ...)
# 단계 1: airquality 데이터 셋 가져오기
data('airquality')
str(airquality)
airquality
# 단계 2: 칼럼 제목을 대문자로 일괄 변경하기
names(airquality) <- toupper(names(airquality))
head(airquality)
# 단계 3: melt() 함수를 이용하여 넓은 형식을 긴 형식으로 변경하기
air_melt <- melt(airquality, id = c("MONTH", "DAY"), na.rm = TRUE)
head(air_melt)
airquality
airquality
head(air_melt)
air_melt
# 단계 4: acast() 함수를 이용하여 3차원으로 구조 변경하기
names(air_melt) <- tolower(names(air_melt))
acast <- acast(air_melt, day ~ month ~ variable)
acast
#day ~ month ~ variable 3개 > 3차원
acast
class(acast)
# 단계 5: 집합함수 적용하기
acast(air_melt, month ~ variable, sum, margins = TRUE)
